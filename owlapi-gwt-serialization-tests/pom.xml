<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- This project builds an OWL API gwt module -->


    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>net.sourceforge.owlapi</groupId>
        <artifactId>owlapi-gwt-parent</artifactId>
        <version>4.3.2-SNAPSHOT</version>
    </parent>

    <!-- groupId and version are inherited from the parent pom -->
    <artifactId>owlapi-gwt-serialization-tests</artifactId>
    <packaging>war</packaging>
    <name>owlapi-gwt-serialization-tests</name>
    <description>
        A set of tests that serialize OWL API objects that should be serializable and sends them over the wire.
        The objects are round tripped from client to server and back to check that they serialize and deserialize
        correctly, and that the GWT compiler can actually compile the source code used for client side emulation.
    </description>


    <properties>
        <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <gwt.test.mode>htmlunit</gwt.test.mode>
    </properties>



    <!-- We depend on the server side custom field serializers and the client side emulation -->
    <dependencies>

        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <version>${gwtVersion}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <version>${gwtVersion}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava-gwt</artifactId>
            <version>20.0</version>
        </dependency>

        <dependency>
            <groupId>net.sourceforge.owlapi</groupId>
            <artifactId>owlapi-gwt</artifactId>
            <version>${project.version}</version>
        </dependency>

    </dependencies>

    <build>

        <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

        <plugins>
            <!-- GWT Maven Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>${gwtVersion}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test</goal>
                            <goal>generateAsync</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- Plugin configuration. There are many available options, see
                  gwt-maven-plugin documentation at codehaus.org -->
                <configuration>
                    <runTarget>owlapi.html</runTarget>
                    <hostedWebapp>${webappDirectory}</hostedWebapp>
                    <out>${project.build.directory}/www-test</out>
                </configuration>
            </plugin>

            <!-- Copy static web files before executing gwt:run -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <webappDirectory>${webappDirectory}</webappDirectory>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>